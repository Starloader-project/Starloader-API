plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'gsl-starplane' version '0.1.0-a20231128'
    id 'me.champeau.mrjar' version '0.1.1'
    id 'eclipse'
}

group 'de.geolykt'
def archivesBaseName = 'starloader-api'
version '2.0.0'

multiRelease {
    targetVersions 8, 9
}

repositories {
    mavenCentral()
    maven {
        name 'stianloader-maven'
        url 'https://stianloader.org/maven'
    }
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
    mavenLocal()
}

starplane {
    withRAS(rootProject.file("src/main/resources/starloader-api.ras"))
    eclipseEEA = rootProject.file("src/eclipse-eea")
}

deployMods {
    // No external mods need to be used as of yet
}

runMods {
    from components["java"]
    debug false
}

configurations {
    compileOnlyApi.extendsFrom(galimulatorDependencies)
    implementation.extendsFrom(uberDependencies)
    uberDependencies {
        canBeResolved = true
    }
}

dependencies {
    // The launcher - the heart of this project
    // Note: SLL 4.0.0-a20231126 depends on Micromixin 4.0.0-a20231126, which has bugged metadata. We update it to use 4.0.0-a20231128, which is correct.
    compileOnlyApi("de.geolykt.starloader:launcher:4.0.0-a20231126") {
        exclude group: 'de.geolykt.starloader', module: 'micromixin-transformer'
        exclude group: 'de.geolykt.starloader', module: 'micromixin-runtime'
        exclude group: 'de.geolykt.starloader', module: 'micromixin-annotations'
    }

    devRuntime("de.geolykt.starloader:launcher:4.0.0-a20231126") {
        exclude group: 'de.geolykt.starloader', module: 'micromixin-transformer'
        exclude group: 'de.geolykt.starloader', module: 'micromixin-runtime'
        exclude group: 'de.geolykt.starloader', module: 'micromixin-annotations'
    }
    devRuntime "de.geolykt.starloader:micromixin-transformer:0.1.0-a20231128"
    devRuntime "de.geolykt.starloader:micromixin-runtime:0.1.0-a20231128"

    compileOnly "de.geolykt.starloader:micromixin-annotations:0.1.0-a20231128"
    compileOnly "de.geolykt.starloader:starplane-annotations:1.0.0"

    compileOnlyApi "org.jetbrains:annotations:24.1.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.ow2.asm:asm-util:9.6'

    uberDependencies('com.github.raeleus.TenPatch:tenpatch:5.2.3') {
        exclude group: 'com.badlogicgames.gdx', module: 'gdx'
    }
}

// Yes, we are using Java 11 to build. But actually Java 8 for compilation.
// However, the javadoc tool is absolutely bricked with Java 8 - so we straight up use Java 17.
tasks.withType(Javadoc) {
    javadocTool = javaToolchains.javadocToolFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javadoc {
    options {
        addBooleanOption('html5', true)
        tags("apiNote:a:API Notice:", "implSpec:a:Implementation Specification:", "implNote:a:Implementation Notice:")
        links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    }

    // see https://stackoverflow.com/a/56641766
    doLast {
        // Append the fix to the file
        def searchScript = new File(destinationDir, '/search.js')
        searchScript.append '\n\n' +
            'getURLPrefix = function(ui) {\n' +
            '    return \'\';\n' +
            '};\n'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task uberJar(type: Jar, dependsOn: remapJar) {
    archiveClassifier = 'remapped-all'
    from {
        configurations['uberDependencies'].collect {
            zipTree(it)
        }
    }
    from {
        remapJar.outputs.files.collect {
            zipTree(it)
        }
    }
    manifest = jar.manifest
}

remapJar {
    archiveClassifier = 'remapped'
    fromJar jar
}

build {
    dependsOn remapJar
}

publish {
    dependsOn publishToMavenLocal // Gradle doesn't quite like this line but otherwise I get issues when publishing so what gives?
}

publishing {
    publications {
        plugin(MavenPublication) { publication ->
            groupId project.group
            artifactId project.archivesBaseName
            version '2.0.0'

            from components['java']

            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        if (System.getProperty('publishRepo') != null) {
            maven {
                url System.getProperty('publishRepo')
                allowInsecureProtocol = true
            }
        } else {
            mavenLocal()
        }
    }
}

// Unfortunately Eclipse does not have per-sourceset java versions so
// of course it will have quite the issues when seeing java 9 classes in an otherwise
// java 8 project. In the end I have opted in using the traditional maven style of dealing with the issue:
// Ignoring the java 9 source set.
eclipse {
    classpath {
        file {
            whenMerged {
                entries.removeIf { it.path == 'src/main/java9' }
            }
        }
    }
}
